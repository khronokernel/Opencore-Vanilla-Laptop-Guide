{"./":{"url":"./","title":"OpenCore Laptop Guide","keywords":"","body":"Introduction Last edited: January 26, 2020 GitHub Pages link with Darkmode support About OpenCore is an open-source unconventional first-in-class piece of software designed to intercept kernel loading to insert a highly advanced rootkit, designed to be an alternative to Clover. OpenCore aims to resolve the constraints and issues imposed by Clover by providing a more versatile and modular system. While OpenCore is primarily designed for Hackintosh systems, it can be used in any scenario where an emulated EFI is needed. Please remember that OpenCore is still new and currently in beta. Unless you want to be on the bleeding edge of Hackintosh development or are planning on contributing to the project, you probably don't want to migrate if you have a stable system currently. Certain aspects of OpenCore such as Vault support will not be covered in this guide. Lastly, this guide is only meant to be a starting point in your journey with OpenCore and not recommended for beginners unless absolutely necessary. For those starting, please see the r/Hackintosh Vanilla Desktop Guide. And those who have issues can visit both the r/Hackintosh subreddit and r/Hackintosh discord for more help. For AMD users having troubles follow the guide can see Snazzy's guide: Snazzy Labs Opencore Guide Advantages of OpenCore On average, OpenCore systems boot faster than those using Clover. OpenCore offers better overall security with better support for FileVault and no need to disable SIP. OpenCore supports boot hotkey support via boot.efi - hold Option or ESC at startup to choose a boot device, Command+R to enter Recovery or Command+Option+P+R to reset NVRAM. OpenCore is designed with the future in mind and uses modern methods to load 3rd party kernel extensions without breaking System Integrity Protection which Clover uses BootCamp switching and boot device selection are supported by reading NVRAM variables set by Startup Disk just like a real mac. Future development for AptioMemoryFix is directly tied to OpenCore, specifically being absorbed into OpenCore itself with the FwRuntimeVariable.efi being used as an extension. UEFI and Legacy boot modes are supported. Mask patching means macOS updates have very little chance of breaking AMD systems, with AMD OSX patches supporting all versions of High Sierra, Mojave and Catalina. All future AMD OSX development is tied to Opencore, so for 10.15.2+ you'll need OpenCore OpenCore Tips Kernel extensions are loaded in the order specified in your config file, so you must load an extension's dependencies before you load the extension itself. For example, Lilu must be loaded before WhateverGreen or VirtualSMC. ACPI patches and SSDTs are applied to all operating systems. Adjust your SSDTs with If (_OSI (\"Darwin\")) {} or use rEFind in conjunction with OpenCore. Some systems require pure UEFI mode to boot. (This setting is commonly called \"Windows 8.1/10 WHQL Mode\" by motherboard manufacturers. See also on flashing a UEFI ROM onto older GPUs) Issues can occur if NVMe devices are set up as SATA devices in the BIOS. OpenCore requires a version of macOS that supports a prelinked kernel, this means any installs of OS X 10.7 Lion or newer are supported with some later versions of OS X 10.6 Snow Leopard also having support. Recommended BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES, AMD users will need to disable SVM in the BIOS) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection) If this can't be turned off in the BIOS(or even found) please consider patching it out. See Fixing CFG Lock for more info. AMD CPU users don't need to worry about. Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Legacy RTC Device(Relevant for Z370+) "},"installer-guide/opencore-efi.html":{"url":"installer-guide/opencore-efi.html","title":"Creating the USB","keywords":"","body":"Creating the USB Last edited: January 26, 2020 Requirements: OpenCorePkg, highly recommend running the debug version to show more info AppleSupportPkg ProperTree or Xcode to edit .plist files (OpenCore Configurator is another tool but is heavily outdated and the Mackie version is known for corruption. Please avoid these kinds of tools at all costs!). Cleaned NVRAM(This is seriously important as you want a clean slate when working with OpenCore, luckily with OC you can press CleanNvram in the boot picker when AllowNvramReset is enabled Knowledge of how a Hackintosh works and what files yours requires(ie: Type of network controller). You must remove Clover from your system entirely if you wish to use it as your main boot-loader. Keep a backup of your Clover based EFI. Making the installer Depending on which OS you're on, see your specific section on making the USB, then return here on setting up Opencore: macOS users Windows users Setting up the EFI To setup OpenCore’s folder structure, you’ll want to grab the EFI folder found in OpenCorePkg's releases page(this will already be done on the BOOT folder for windows users): Now something you'll notice is that it comes with a bunch of files in Drivers and Tools folder, we don't want most of these: Remove from Drivers: AppleUsbKbDxe.efi Used for OpenCore picker on legacy systems running DuetPkg, not recommended and even harmful on Ivy Bridge and newer NvmExpressDxe.efi Used for Haswell and older when no NVMe driver is built into the firmware XhciDxe.efi Used for Sandy Bridge and older when no XHCI driver is built into the firmware Remove from Tools: CleanNvram.efi We'll be using OpenCore's built-in function VerifyMsrE2.efi Used for verifying MSR lock, for install we can ignore A cleaned up EFI: Now you can place your necessary firmware drivers(.efi) from AppleSupportPkg into the Drivers folder and Kexts/ACPI into their respective folders. Please note that UEFI drivers from Clover are not supported with OpenCore!(EmuVariableUEFI, AptioMemoryFix, OsxAptioFixDrv, etc). Please see the Clover firmware driver conversion for more info on supported drivers and those merged into OpenCore. Here's what a populated EFI can look like: Reminder: SSDTs and custom DSDTs go in ACPI folder Kexts go in Kexts folder Firmware drivers(.efi) go in the Drivers folder See Gathering Files on the next page for more info on what you need "},"installer-guide/mac-install.html":{"url":"installer-guide/mac-install.html","title":"macOS install","keywords":"","body":"Making the installer in macOS Last edited: January 18, 2020 While you don't need a fresh install of macOS to use OpenCore, some users prefer having a fresh slate with their boot manager upgrades. Note for legacy users If you want to use OpenCore on a system without UEFI, please follow the Legacy Install section first, after you can continue following the Base folder structure section To start we'll want to grab ourselves a copy of macOS, you can skip this and head to formatting the USB if you're just making a bootable OpenCore stick and not an installer. For everyone else, here's your options for obtaining macOS directly from Apple's servers: AppStore links: High Sierra, Mojave, Catalina GibMacOS: Download the full macOS installer Run BuildmacOSInstallApp then drag and drop the macOS Downloads folder found in GibMacOS Next we'll want to format our USB HFS+/MacOS Journaled with GUID partition map, must be 12GB for macOS Catalina.as-is recommended to name it MyVolume as the script below can be used as-is. Next run the createinstallmedia command provided by Apple, note that the command is made for USB's formatted with the name MyVolume: sudo /Applications/Install\\ macOS\\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume This will take some time so may want to grab a coffee or continue reading the guide(to be fair you really shouldn't be following this guide step by step without reading the whole thing first) Setting up OpenCore's EFI environment Setting up OpenCore's EFI environment is simple, all you need to do is mount our EFI system partition. This is automatically made when we format with GUID but is hidden from the end user, this is where our friend mountEFI comes in: You'll notice that once we open the EFI partition, it's empty. This is where the fun begins. Now with all this done, return to Creating the USB to finish up your work "},"installer-guide/winblows-install.html":{"url":"installer-guide/winblows-install.html","title":"Windows install","keywords":"","body":"Making the installer in Windows Last edited: January 18, 2020 While you don't need a fresh install of macOS to use OpenCore, some users prefer having a fresh slate with their boot manager upgrades. To start you'll need the following: 4GB USB Stick GibMacOS To start, open gibMacOS.bat as Admin and select Toggle Recovery-Only: Now search through for your desired version of macOS, for this example we'll choose option 5 for macOS Catalina: This will download the RecoveryHDMetaDmg.pkg to \\gibmacos-master\\macOS Downloads\\publicrelease\\xxx-xxxxx - 10.x.x macOS xxx Next open makeinstall.bat as Admin and select your drive with option O for OpenCore( ex: 1O). Once your drive is formatted, it will then ask you for the RecoveryHDMetaDMG.pkg that we downloaded earlier. Top right of the file window will let you copy the file path: makeinstall will finish up by installing OpenCore to your USB's EFI System Partition, you can find this partition labeled as BOOT: Now with all this done, return to Creating the USB to finish up your work "},"ktext.html":{"url":"ktext.html","title":"Gathering files","keywords":"","body":"Gathering files Last edited: January 30, 2020 This section is for gathering miscellaneous files for booting macOS, we do expect you to know your hardware well before starting and hopefully made a Hackintosh before as we won't be deep diving in here. Firmware Drivers These are the drivers used for OpenCore, for the majority of systems you only need 3 .efi drivers to get up and running: ApfsDriverLoader.efi Needed for seeing APFS volumes. VboxHfs.efi or HfsPlus.efi Needed for seeing HFS volumes. Do not mix HFS drivers FwRuntimeServices.efi Replacement for AptioMemoryFix.efi, used for patching boot.efi for NVRAM fixes and better memory management. For legacy users: AppleUsbKbDxe.efi Used for OpenCore picker on legacy systems running DuetPkg, not recommended and even harmful on UEFI(Ivy Bridge and newer) NvmExpressDxe.efi Used for Haswell and older when no NVMe driver is built into the firmware XhciDxe.efi Used for Sandy Bridge and older when no XHCI driver is built into the firmware For a full list of compatible drivers, see 11.2 Properties in the OpenCorePkg Docs. These files will go in your Drivers folder in your EFI Kexts A kext is a kernel extension, you can think of this as a driver for macOS, these files will go into the Kexts folder in your EFI All kext listed below can be found pre-compiled in the Kext Repo. Kexts here are compiled each time there's a new commit. Must haves: VirtualSMC Emulates the SMC chip found on real macs, without this macOS will not boot Alternative is FakeSMC which can have better or worse support, most commonly used on legacy hardware. Lilu A kext to patch many processes, required for AppleALC and WhateverGreen and recommended for VirtualSMC VirtualSMC Plugins: SMCProcessor.kext Used for monitoring CPU temperature SMCSuperIO.kext Used for monitoring fan speed SMCLightSensor.kext Used for the ambient light sensor on laptops SMCBatteryManager.kext Used for measuring battery readouts on laptops, requires your battery to be setup. Do not use before battery patching Graphics: WhateverGreen Used for graphics patching, all GPUs benefit from this kext. Audio: AppleALC Used for AppleHDA patching, used for giving you onboard audio. AMD 15h/16h may have issues with this and Ryzen/Threadripper systems rarely have mic support Ethernet: IntelMausiEthernet Required for Intel NICs AtherosE2200Ethernet Required for Atheros and Killer NICs RealtekRTL8111 Required for Realtek NICs USB: USBInjectAll Used for injecting intel USB controllers, H370, B360, H310 and X79/X99/X299 systems will likely need XHCI-unsupported as well. Trackpad: VoodooI2C Keyboard: VoodooPS2Controller WiFi and Bluetooth: AirportBrcmFixup Used for patching non-Apple Broadcom cards, will not work on intel, Killer, Realtek, etc BrcmPatchRAM Used for uploading firmware on broadcom bluetooth chipset, required for all non-Apple Airport cards. To be paired with BrcmFirmwareData.kext BrcmPatchRAM3 for 10.14+ (must be paired with BrcmBluetoothInjector) BrcmPatchRAM2 for 10.11-10.14 BrcmPatchRAM for 10.10 or older Extra's: NVMeFix Used for fixing power management and initialization on non-Apple NVMe, requires macOS 10.14 or newer NoTouchID Required for MacBookPro13,x+, helps fix lag at login and authentication dialogs Please refer to Kexts.md for a full list of supported kexts SSDTs So you see all those SSDTs in the AcpiSamples folder and wonder whether you need any of them. For us, we will be going over what SSDTs you need in your specific ACPI section of the config.plist, as the SSDTs you need are platform specific. With some even system specific where they need to be configured and you can easily get lost if I give you a list of SSDTs to choose from now. Getting started with ACPI has an extended section on SSDTs including compiling them on different platforms. Now head to your specific CPU section to setup your config.plist Intel Config.plist Ivy Bridge Haswell Broadwell Skylake Kaby Lake Coffee Lake Intel HEDT Config.plist Skylake-X AMD Config.plist AMD "},"config.plist/ivy-bridge.html":{"url":"config.plist/ivy-bridge.html","title":"Ivy Bridge","keywords":"","body":"Ivy Bridge Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: CPU-PM Needed for proper CPU power management, you will need to run Pike's ssdtPRGen.sh script to generate this file. This will be run in post install. SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for use we need to block both CpuPm and Cpu0Ist: CpuPm: OemTableId: 437075506d000000 TableLength: 0 TableSignature: 53534454 Enabled: YES Cpu0Ist: OemTableId: 4370753049737400 TableLength: 0 TableSignature: 53534454 Enabled: YES Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT | Comment | String | Change XXXX to EC | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | xxxxxxxx | | Replace | Data | 45435f5f | | Comment | String | Change _OSI to XOSI | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | 5f4f5349 | | Replace | Data | 584f5349 | Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x0166000A - this is the standard hex for the ig-plat 0A006601 when hex-swapped We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from the map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such. Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majogrity can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Ivy Bridge example, we'll choose the MacBookPro10,1 SMBIOS. The typical breakdown is as follows: MacBookPro10,1 - 45w Quad core MacBookPro10,2 - 15w Dual core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro10,1 SMBIOS Info # ####################################################### Type: MacBookPro10,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: Fix CPU Power Management(run ssdtPRGen.sh and add the SSDT.aml to EFI and config) USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"config.plist/haswell.html":{"url":"config.plist/haswell.html","title":"Haswell","keywords":"","body":"Haswell Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT | Comment | String | Change XXXX to EC | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | xxxxxxxx | | Replace | Data | 45435f5f | | Comment | String | Change _OSI to XOSI | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | 5f4f5349 | | Replace | Data | 584f5349 | Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x0D220003 - this is used when the iGPU is used to drive a display 0300220D when hex-swapped 0x04120004 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 04001204 when hex-swapped I added another portion as well that shows a device-id fake in case you have an HD 4400 which is unsupported in macOS. For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x04120000 - this is the device id for HD 4600 which does have support in macOS 12040000 when hex swapped PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majogrity can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Haswell example, we chose the MacBookPro11,1 SMBIOS. The typical breakdown is as follows: MacBookPro11,1 - 15w Dual core MacBookPro11,2 - 45w Quad core(High End, iGPU) MacBookPro11,3 - 45w Quad core(High End, Nvidia dGPU) MacBookPro11,4 - 45w Quad core(High End, iGPU) MacBookPro11,5 - 45w Quad core(High End, AMD dGPU) Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro11,1 SMBIOS Info # ####################################################### Type: MacBookPro11,1 Serial: C02M9SYJFY10 Board Serial: C02408101J9G2Y7A8 SmUUID: 7B227BEC-660D-405F-8E60-411B3E4EF055 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: NO Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"config.plist/broadwell.html":{"url":"config.plist/broadwell.html","title":"Broadwell","keywords":"","body":"Broadwell Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT | Comment | String | Change XXXX to EC | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | xxxxxxxx | | Replace | Data | 45435f5f | | Comment | String | Change _OSI to XOSI | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | 5f4f5349 | | Replace | Data | 584f5349 | Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x0D220003 - this is used when the iGPU is used to drive a display 0300220D when hex-swapped 0x04120004 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 04001204 when hex-swapped I added another portion as well that shows a device-id fake in case you have an HD 4400 which is unsupported in macOS. For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x04120000 - this is the device id for HD 4600 which does have support in macOS 12040000 when hex swapped PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like desktop Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majogrity can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Broadwell example, we chose the MacBookPro12,1 SMBIOS. Note there were no Quad core Broadwell MacBooks so the typical breakdown is as follows: MacBookPro12,1 - 15w Dual core MacBookPro11,2 - 45w Quad core(High End, iGPU) MacBookPro11,3 - 45w Quad core(High End, Nvidia dGPU) MacBookPro11,4 - 45w Quad core(High End, iGPU) MacBookPro11,5 - 45w Quad core(High End, AMD dGPU) Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro12,1 SMBIOS Info # ####################################################### Type: MacBookPro12,1 Serial: C02M9SYJFY10 Board Serial: C02408101J9G2Y7A8 SmUUID: 7B227BEC-660D-405F-8E60-411B3E4EF055 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: NO Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"config.plist/skylake.html":{"url":"config.plist/skylake.html","title":"Skylake","keywords":"","body":"Skylake Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x19120000 - this is used when the iGPU is used to drive a display 00001219 when hex-swapped 0x19120001 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 01001219 when hex-swapped We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (May need to be set for YES if OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Skylake example, we'll chose the MacBookPro13,1 SMBIOS - There are 3 main SMBIOS used for Skylake: MacBookPro13,1 - 15w Dual core(Low end) MacBookPro13,2 - 15w Dual core(High end) MacBookPro13,3 - 45w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro13,1 SMBIOS Info # ####################################################### Type: MacBookPro13,1 Serial: C02S3HYWGG7L Board Serial: C02629102GUGPF7AD SmUUID: 3508AD44-B67D-4AD7-A109-7955130A1033 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"config.plist/kaby-lake.html":{"url":"config.plist/kaby-lake.html","title":"Kaby Lake","keywords":"","body":"Kaby Lake Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fail to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artifacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x59120000 - this is used when the iGPU is used to drive a display 00001259 when hex-swapped 0x59120003 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 03001259 when hex-swapped PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from the map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Kaby Lake example, we'll chose the MacBookPro14,1 SMBIOS - There are 3 main SMBIOS used for Kaby Lake: MacBookPro14,1 - 15w Dual core(Low end) MacBookPro14,2 - 15w Dual core(High end) MacBookPro14,3 - 45w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro14,1 SMBIOS Info # ####################################################### Type: MacBookPro14,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The lengh of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"config.plist/coffee-lake-8th-gen.html":{"url":"config.plist/coffee-lake-8th-gen.html","title":"Coffee Lake(8th Gen)","keywords":"","body":"Coffee Lake Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT | Comment | String | Change XXXX to EC | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | xxxxxxxx | | Replace | Data | 45435f5f | | Comment | String | Change _OSI to XOSI | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | 5f4f5349 | | Replace | Data | 584f5349 | Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, thanks to SSDT-PMC we no longer need this option DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x3E9B0007 - this is used when the iGPU is used to drive a display 07009B3E when hex-swapped 0x3E920003 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 0300923E when hex-swapped Worth noting that for 10.12 -> 10.13.5, you would need to fake the iGPU to the same values in the Kaby Lake guide, as this was before native Coffee Lake iGPU showed up. We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. I added another section as well that shows a fake device-id for the i3-8100's UHD 630. This has a different device id than the UHD 630 found on the 8700k, for instance, (3e918086 vs 3e928086 ). For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x3e920000 - this is the device id for the UHD 630 found on an 8700k 923e0000 when hex swapped Note: FakeID is only required for High Sierra, Mojave doesn't require this For users with black screen issues after verbose on B360, B365, H310, H370, Z390, please see the BusID iGPU patching page PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100` - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1** - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommended keeping blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Coffee Lake example, I chose the MacBookPro15,1 SMBIOS - There are two main SMBIOS used for 8th gen CPUs: MacBookPro15,1 - 45w Hexa core MacBookPro15,2 - 15w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro15,1 SMBIOS Info # ####################################################### Type: MacBookPro15,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead but the majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"config.plist/coffee-lake-9th-gen.html":{"url":"config.plist/coffee-lake-9th-gen.html","title":"Coffee Lake(9th Gen)","keywords":"","body":"Coffee Lake Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-AWAC This is the 300 series RTC patch, required for most B360, B365, H310, H370, Z390 and some Z370 boards which prevent systems from booting macOS. The alternative is SSDT-RTC0 for when AWAC SSDT is incompatible due to missing the Legacy RTC clock, to check whether you need it and which to use please see Getting started with ACPI page. SSDT-PMC So true 300 series motherboards(non-Z370) don't declare the FW chip as MMIO in ACPI and so XNU ignores the MMIO region declared by the UEFI memory map. This SSDT brings back NVRAM support and uses the scope PCI0.LPCB, this is the most common scope so a pre-made can be found here: SSDT-PMC.aml SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT | Comment | String | Change XXXX to EC | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | xxxxxxxx | | Replace | Data | 45435f5f | | Comment | String | Change _OSI to XOSI | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | 5f4f5349 | | Replace | Data | 584f5349 | Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, thanks to SSDT-PMC we no longer need this option DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x3E9B0007 - this is used when the iGPU is used to drive a display 07009B3E when hex-swapped 0x3E920003 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 0300923E when hex-swapped Worth noting that for 10.12 -> 10.13.5, you would need to fake the iGPU to the same values in the Kaby Lake guide, as this was before native Coffee Lake iGPU showed up. We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. I added another section as well that shows a fake device-id for the i3-8100's UHD 630. This has a different device id than the UHD 630 found on the 8700k, for instance, (3e918086 vs 3e928086 ). For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x3e920000 - this is the device id for the UHD 630 found on an 8700k 923e0000 when hex swapped Note: FakeID is only required for High Sierra, Mojave doesn't require this For users with black screen issues after verbose on B360, B365, H310, H370, Z390, please see the BusID iGPU patching page PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. **debug=0x100` - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS Note: Some Z390 users may need to calculate a slide value to get around \"Couldn't Allocate Runtime\" errors. See Fixing KALSR slide values for more info. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommended keeping blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Coffee Lake example, I chose the MacBookPro16,1 SMBIOS - There are two main SMBIOS used for 9th gen CPUs, note that there are no 13\" 9th gen MacBooks: MacBookPro16,1 - 45w Hexa and Octa core MacBookPro15,2 - 15w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro16,1 SMBIOS Info # ####################################################### Type: MacBookPro16,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead but the majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"config.plist/comet-lake.html":{"url":"config.plist/comet-lake.html","title":"Comet Lake","keywords":"","body":"Comet Lake Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-AWAC This is the 300 series RTC patch, required for most B360, B365, H310, H370, Z390 and some Z370 boards which prevent systems from booting macOS. The alternative is SSDT-RTC0 for when AWAC SSDT is incompatible due to missing the Legacy RTC clock, to check whether you need it and which to use please see Getting started with ACPI page. SSDT-PMC So true 300 series motherboards(non-Z370) don't declare the FW chip as MMIO in ACPI and so XNU ignores the MMIO region declared by the UEFI memory map. This SSDT brings back NVRAM support and uses the scope PCI0.LPCB, this is the most common scope so a pre-made can be found here: SSDT-PMC.aml SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT | Comment | String | Change XXXX to EC | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | xxxxxxxx | | Replace | Data | 45435f5f | | Comment | String | Change _OSI to XOSI | | :--- | :--- | :--- | | Enabled | String | YES | | Count | Number | 0 | | Limit | Nuber | 0 | | Find | Data | 5f4f5349 | | Replace | Data | 584f5349 | Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, thanks to SSDT-PMC we no longer need this option DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x3E9B0007 - this is used when the iGPU is used to drive a display 07009B3E when hex-swapped 0x3E920003 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 0300923E when hex-swapped Worth noting that for 10.12 -> 10.13.5, you would need to fake the iGPU to the same values in the Kaby Lake guide, as this was before native Coffee Lake iGPU showed up. We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. I added another section as well that shows a fake device-id for the i3-8100's UHD 630. This has a different device id than the UHD 630 found on the 8700k, for instance, (3e918086 vs 3e928086 ). For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x3e920000 - this is the device id for the UHD 630 found on an 8700k 923e0000 when hex swapped Note: FakeID is only required for High Sierra, Mojave doesn't require this For users with black screen issues after verbose on B360, B365, H310, H370, Z390, please see the BusID iGPU patching page PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. **debug=0x100` - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS Note: Some Z390 users may need to calculate a slide value to get around \"Couldn't Allocate Runtime\" errors. See Fixing KALSR slide values for more info. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommended keeping blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Comet Lake example, I chose the MacBookPro16,1 SMBIOS - There are two main SMBIOS used for 9th gen CPUs, note that there are no 13\" 9th gen MacBooks: MacBookPro16,1 - 45w Hexa and Octa core MacBookPro15,2 - 15w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro16,1 SMBIOS Info # ####################################################### Type: MacBookPro16,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead but the majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"post-install/nvram.html":{"url":"post-install/nvram.html","title":"Emulated NVRAM","keywords":"","body":"Emulated NVRAM Last edited: January 13, 2020 So this section is for those who don't have native NVRAM, the most common hardware to have incompatible native NVRAM with macOS areX99 and some X299 series chipsets: X99 X299 For B360, B365, H310, H370, Z390 users, make sure you have SSDT-PMC both under EFI/OC/ACPI and config.plist -> ACPI -> Add. For more info on making and compiling SSDTs, please see Getting started with ACPI Cleaning out the Clover gunk So some may not have noticed but Clover may have installed RC scripts into macOS for proper NVRAM emulation. This is an issue as it conflicts with OpenCore's method of emulation. Files to delete: /Volumes/EFI/EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi /Volumes/EFI/nvram.plist /etc/rc.clover.lib /etc/rc.boot.d/10.save_and_rotate_boot_log.local /etc/rc.boot.d/20.mount_ESP.local /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled /etc/rc.shutdown.d/80.save_nvram_plist.local​ If folders are empty then delete them as well: /etc/rc.boot.d /etc/rc.shutdown.d​ Verifying if you have working NVRAM To start, open the terminal and run the following one line at a time: sudo -s sudo nvram -c sudo nvram myvar=test exit Now reboot and run this: nvram -p | grep -i myvar If nothing returns then your NVRAM is not working. If a line containing myvar test returns, your NVRAM is working. Note: nvram -c requires SIP to be off, an alternative is to wipe NVRAM at the boot menu. Reminder you'll need Misc -> Security -> AllowNvramReset -> YES Enabling emulated NVRAM (with a nvram.plist) To enable emulated NVRAM, you'll need 3 things set: Within your config.plist: Booter: DisableVariableWrite: set to YES Misc -> Secuirty: ExposeSensitiveData: set to 0x3 NVRAM: LegacyEnable: set to YES LegacyOverwrite set to YES LegacySchema: NVRAM variables set(OpenCore compares these to the variables present in nvram.plist) ExposeSensitiveData: set to 0x3 And within your EFI: FwRuntimeServices.efi driver(this is needed for proper sleep, shutdown and other services to work correctly Now grab the 'LogoutHook.command' and place it somewhere safe (e.g. within your user directory, as shown below): /Users/(your username)/LogoutHook/LogoutHook.command Open up terminal and run the following: sudo defaults write com.apple.loginwindow LogoutHook /Users/(your username)/LogoutHook/LogoutHook.command And voila! You have emulated NVRAM! Do keep in mind this requires the nvram command to support the -x flag for this to work correctly which is unavailable on macOS 10.12 and below. If you are installing macOS 10.12 or earlier, you need to copy nvram.mojave into the same folder as LogoutHook.command, which fixes this by invoking it instead of the system nvram command. Something else to note is that macOS is only able to read nvram.plist but it won't be able to write to nvram.plist unless running the shutdown process. This means running the test above won't work "},"post-install/spoof.html":{"url":"post-install/spoof.html","title":"Disabling GPU","keywords":"","body":"Disabling GPU Last edited: January 21, 2020 GPU Spoof So you need to hide your unsupported GPU? Well with OpenCore things are slightly different, specifically that we need to specify to which exact device we want to spoof. There are 3 ways we can do this: Boot Flag Disables all GPUs except the iGPU DeviceProperties Disables GPU on a per-slot basis SSDT Disables GPU on a per-slot basis CSM must be off in the BIOS for the spoofing to work correctly, especially on AMD CPU based systems Boot Flag By far the simplest way, all you need to do is add the following boot-arg: -wegnoegpu Do note that this will disable all GPUs excluding the iGPU DevicePropeties Method Here is quite simple, find the PCI route with gfxutil and then create a new DeviceProperties section with your spoof: path/to/gfxutil -f GFX0 And the output will result in something similar: DevicePath = PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0) With this, navigate towards Root -> DeviceProperties -> Add and add your PCI route with the following properties: Key Type Value name data 23646973706C6179 IOName string #display class-code data FFFFFFFF SSDT Method There are many ways to find the path but generally, the easiest way is to get into Device Manager under windows and find the PCI path. Example of device path: \\_SB.PCI0.PEG0.PEGP DefinitionBlock (\"\", \"SSDT\", 2, \"hack\", \"spoof\", 0x00000000) { External (_SB_.PCI0.PEG0.PEGP, DeviceObj) // (from opcode) Method (_SB.PCI0.PEG0.PEGP._DSM, 4, NotSerialized) // _DSM: Device-Specific Method { If (LOr (LNot (Arg2), LEqual (_OSI (\"Darwin\"), Zero))) { Return (Buffer (One) { 0x03 }) } Return (Package (0x0A) { \"name\", Buffer (0x09) { \"#display\" }, \"IOName\", \"#display\", \"class-code\", Buffer (0x04) { 0xFF, 0xFF, 0xFF, 0xFF }, \"vendor-id\", Buffer (0x04) { 0xFF, 0xFF, 0x00, 0x00 }, \"device-id\", Buffer (0x04) { 0xFF, 0xFF, 0x00, 0x00 } }) } } A copy of this SSDT can be found here: Spoof-SSDT.dsl You will need MaciASL to compile this, reminder that .aml is assembled and .dsl is source code. You can compile with MaciASL by running File -> Save As -> ACPI Machine Language. Source: CorpNewt Fixing Windows So something that many users are annoyed about is the fact that you need to switch between GPU outputs. Well a neat little trick on Windows is that you can reroute your display options to a specific GPU: "},"post-install/security.html":{"url":"post-install/security.html","title":"Security and FileVault","keywords":"","body":"Security and FileVault Last edited: January 13, 2020 So something that makes OpenCore truly special is how it's been built with security in mind which is quite rare especially in the Hackintosh community. Well here we'll be going through setting up FileVault and talking about 2 features of OpenCore: ScanPolicy Vault FileVault Setup To start, you'll need the following .efi drivers: FwRuntimeServices.efi AppleUsbKbDxe.efi for DuetPkg users(systesm without UEFI support) Do not use VirtualSMC.efi with OpenCore, its already baked inside Setting in your config.plist: Misc -> Boot PollAppleHotKeys set to YES(While not needed can be helpfu) Misc -> Security AuthRestart set to YES(Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional) NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 UIScale set to 02 for high resolution small displays UEFI -> Input KeySupport set to YES(Only when using OpenCore's builtin input, users of UsbKbdxe should avoid) UEFI -> Protocols FirmwareVolume set to YES HashServices set to YES for Haswell and older(this includes X99), this is needed for systems with broken SHA-1 hashing AppleSmcIo set to YES(this replaces VirtualSMC.efi) UEFI -> Quirks ProvideConsoleGOP to YES RequestBootVarRouting set to YES ExitBootServicesDelay set to 5 if you recieve Still waiting for root device on Aptio IV firmwares(Haswell and older) With all this, you can proceed to enable FileVault like on a normal mac under System Preferences -> Security & Privacy -> FileVault Scan Policy What this quirk allows to prevent scanning and booting from untrusted sources. Setting to 0 will allow all sources present to be bootable but calculating a specific ScanPolicy value will allow you a greater range of flexibilty and security. To calculate the ScanPolicy value, you simply add up all the hexidecimal values(with a hexideciaml calculator, you can access this from the built-in macOS caluclator app with ⌘+3). Once it's all added up, you would add this hexidecimal value to ScanPolicy(you will need to convert it to a decimal value first, Xcode will automatically convert it when you paste it) 0x00000001 (bit 0) — OC_SCAN_FILE_SYSTEM_LOCK restricts scanning to only known file systems defined as a part of this policy. File system drivers may not be aware of this policy, and to avoid mounting of undesired file systems it is best not to load its driver. This bit does not affect dmg mounting, which may have any file system. Known file systems are prefixed with OCSCAN_ALLOW_FS. 0x00000002 (bit 1) — OC_SCAN_DEVICE_LOCK restricts scanning to only known device types defined as a part of this policy. This is not always possible to detect protocol tunneling, so be aware that on some systems it may be possible for e.g. USB HDDs to be recognised as SATA. Cases like this must be reported. Known device types are prefixed with OCSCAN_ALLOW_DEVICE. 0x00000100 (bit 8) — OC_SCAN_ALLOW_FS_APFS allows scanning of APFS file system. 0x00000200 (bit 9) — OC_SCAN_ALLOW_FS_HFS allows scanning of HFS file system. 0x00000400 (bit 10) — OC_SCAN_ALLOW_FS_ESP allows scanning of EFI System Partition file system. 0x00010000 (bit 16) — OC_SCAN_ALLOW_DEVICE_SATA allow scanning SATA devices. 0x00020000 (bit 17) — OC_SCAN_ALLOW_DEVICE_SASEX allow scanning SAS and Mac NVMe devices. 0x00040000 (bit 18) — OC_SCAN_ALLOW_DEVICE_SCSI allow scanning SCSI devices. 0x00080000 (bit 19) — OC_SCAN_ALLOW_DEVICE_NVME allow scanning NVMe devices. 0x00100000 (bit 20) — OC_SCAN_ALLOW_DEVICE_ATAPI allow scanning CD/DVD devices. 0x00200000 (bit 21) — OC_SCAN_ALLOW_DEVICE_USB allow scanning USB devices. 0x00400000 (bit 22) - OC_SCAN_ALLOW_DEVICE_FIREWIRE allow scanning FireWire devices. 0x00800000 (bit 23) — OC_SCAN_ALLOW_DEVICE_SDCARD allow scanning card reader devices. By default, ScanPolicy is given a value of 0xF0103(983,299) which is the combination of the following: OC_SCAN_FILE_SYSTEM_LOCK OC_SCAN_DEVICE_LOCK OC_SCAN_ALLOW_FS_APFS OC_SCAN_ALLOW_DEVICE_SATA OC_SCAN_ALLOW_DEVICE_SASEX OC_SCAN_ALLOW_DEVICE_SCSI OC_SCAN_ALLOW_DEVICE_NVME And lets just say for this example that you want to add OC_SCAN_ALLOW_DEVICE_USB: 0x00200000 + 0xF0103 = 0x2F0103 And converting this to decimal gives us 3,080,451 Vault What is vaulting? Well vaulting is based around 2 things, vault.plist and vault.sig: vault.plist: a \"snapshot\" of your EFI vault.sig: validation of vault.plist This can be seen as secureboot for OpenCore, so no one can modify it and get in without your permission. The specifics of vaulting is that a 256 byte RSA-2048 signature of vault.plist will be shoved into our OpenCore.efi. This key can either be shoved into OpenCoreVault.c before compiling or with sign.command if you already have OpenCore.efi compiled. Do note that nvram.plist won't be vaulted so users with emulated NVRAM still have risk of someone adding/removing certain NVRAM variables Settings in your config.plist: Misc -> Secuirty -> RequireSignature set to True Misc -> Secuirty -> RequireVault set to True Setting up vault: Grab OpenCorePkg and open the CreateVault folder, inside we'll find the following: create_vault.sh RsaTool sign.command The last one is what we care about: sign.command So when we run this command, it'll look for the EFI folder located beside our Utilities folder, so we want to bring either our personal EFI into the OpenCorePkg folder or bring Utilities into our EFI folder: Now we're ready to run sign.command: Disabling Vault after setup: If you're doing heavy troublehooting or have the need to disable Vault, the main things to change: Grab a new copy of OpenCore.efi Misc -> Secuirty -> RequireSignature set to False Misc -> Secuirty -> RequireVault set to False "},"troubleshooting/troubleshooting.html":{"url":"troubleshooting/troubleshooting.html","title":"General Troubleshooting","keywords":"","body":"General Troubleshooting Last edited: Febuary 1, 2020 This section is for those having issues booting either OpenCore, macOS or having issues inside macOS. This page is devided up into a couple sections: OpenCore booting issues This is anytime before or during the loading of the macOS kernel macOS booting issues Anytime between the kernel loading and installing macOS macOS post-install issues Anytime after macOS is installed Other issues This includes troubleshooting tools used for making your USB, fixing cosmetics in OpenCore, etc While still a work in progress, laptop users wanting to convert an existing Clover install can see the Clover to OpenCore conversion for more info OpenCore booting Stuck on no vault provided! Stuck on EndRandomSeed Can't see macOS partitions Black screen after picker Stuck on OC: OcAppleGenericInput... - Success Stuck on OCB: OcScanForBootEntries failure - Not Found Stuck on OCABC: Memory pool allocation failure - Not Found Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters... Stuck on OC: Driver XXX.efi at 0 cannot be found Stuck on Buffer Too Small Stuck on Plist only kext has CFBundleExecutable key Receiving Failed to parse real field of type 1 Stuck after selection macOS partition on OpenCore Can't select anything in the picker Stuck on This version of Mac OS X is not supported: Reason Mac... Couldn't allocate runtime area errors? SSDTs not being added Booting OpenCore reboots to BIOS Stuck on no vault provided! Turn the following off under Misc -> Security: RequireSignature RequireVault If you have already executed the commands listed in the OpenCore Reference Manual under 8.5 Security Properties, 5. RequireVault, you'll need to restore your OpenCore.efi file. Stuck on EndRandomSeed Couple problems: ProvideConsoleGop is likely missing as this is needed for transitioning to the next screen, this was originally part of AptioMemoryFix but is now within OpenCore as this quirk. Can be found under UEFI -> Quirks Missing kernel patches(only applies for AMD CPUs, make sure they're Opencore patches and not Clover. Clover uses MatchOS while OpenCore has MinKernel and Maxkernel) Another possible problem is that some users either forget or cannot disable CFG-Lock in the BIOS(specifically relating to a locked 0xE2 MSR bit for power management, obviously much safer to turn off CFG-Lock). Do note this is for Intel users only, not AMD. When this happens, there's a couple of possible fixes: Fixing CFG Lock Enable AppleXcpmCfgLock and AppleCpuPmCfgLock, this disables PKG_CST_CNFIG_CONTROL within the XNU and AppleIntelCPUPowerManagment respectively. Not recommended long term solution as this can cause instability. Another other possible problem is IRQ conflicts, Clover has plenty of different fixes that it can apply without you directly setting them. This makes it much more difficult when converting from Clover to OpenCore though luckily CorpNewt's also got a fix: SSDTTime's FixHPET option Can't see macOS partitions Main things to check: ScanPolicy set to 0 to show all drives Have the proper firmware drivers such as ApfsDriverLoader and HFSPlus(or VBoxHfs) Enable AvoidHighAlloc if you're running a network recovery install Black screen after picker This is due to missing ConsoleGOP, enable it under your config: UEFI -> Quriks -> ProvideConsoleGOP If this doesn't help, grab the debug versions of OpenCore.efi and BOOTx64.efi and replace them in your EFI. This will show much more info on where your hack is actually getting stuck. Stuck on OC: OcAppleGenericInput... - Success So this isn't actually an error, instead OpenCore isn't showing you all the debug info. This is right before/while the kernel is being loaded so things we need to check for: Intel: CFG-Lock disabled in the BIOS or AppleCpuPmCfgLock and AppleCpuPmCfgLock enabled under Kernel -> Quirks AMD: Verify you have added the correct kernel patches to your config(remember, OpenCore patches use MinKernel and MaxKernel while Clover has MatchOS) Ryzen/Threadripper(17h) Bulldozer/Jaguar(15h/16h) If this doesn't help, grab the debug versions of OpenCore.efi and BOOTx64.efi and replace them in your EFI. This will show much more info on where your hack is actually getting stuck. Stuck on OCB: OcScanForBootEntries failure - Not Found This is due to OpenCore being unable to find any drives with the current ScanPolicy, setting to 0 will allow all boot options to be shown Misc -> Secuirty -> ScanPolicy -> 0 Stuck on OCABC: Memory pool allocation failure - Not Found This is due to either incorrect BIOS settings and/or incorrect Booter values. Make sure config.plist -> Booter -> Quirks is correct and verify your BIOS settings: Above4GDecoding is Enabled CSM is Disabled(Enabling Windows8.1/10 WHQL Mode can do the same on some boards) Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters... This is due to either using a Clover config with OpenCore or using a configurator such as Mackie's Clover and OpenCore configurator. You'll need to start over and make a new config or figure out all the garbage you need to remove from your config. This is why we don't support configurators, they are known for these issues Stuck on OC: Driver XXX.efi at 0 cannot be found Verify that your EFI/OC/Drivers matches up with your config.plist -> UEFi -> Drivers Stuck on Buffer Too Small UEFI -> Quirks -> AvoidHighAlloc -> Enable Enable Above4GDecoding in the BIOS Stuck on Plist only kext has CFBundleExecutable key Missing or incorrect Executable path Receiving \"Failed to parse real field of type 1\" A value is set as real when it's not supposed to be, generally being that Xcode converted HaltLevel by accident: HaltLevel 2147483648 To fix, swap real for integer: HaltLevel 2147483648 Stuck after selection macOS partition on OpenCore CFG-Lock not off(Intel Users only), couple solutions: Patch your MSR E2(Recommended solution) Enable AppleXcpmCfgLock and AppleCpuPmCfgLock, this disables PKG_CST_CNFIG_CONTROL within the XNU and AppleIntelCPUPowerManagment repectively. Not recommeneded long term solution as this can cause instability. AMD kernel patches aren't working(AMD Users only): Either outdated or missing kernel patches Incompatible keyboard driver: Disable PollAppleHotKeys and enable KeySupport, then remove AppleUsbKbDxe from your config.plist -> UEFI -> Drivers If the above doesn't work, reverse: disable KeySupport, then add AppleUsbKbDxe to your config.plist -> UEFI -> Drivers Can't select anything in the picker Incompatible keyboard driver: Disable PollAppleHotKeys and enable KeySupport, then remove AppleUsbKbDxe from your config.plist -> UEFI -> Drivers If the above doesn't work, reverse: disable KeySupport, then add AppleUsbKbDxe to your config.plist -> UEFI -> Drivers Stuck on This version of Mac OS X is not supported: Reason Mac... This error happens when SMBIOS is one no longer supported by that version of macOS, make sure values are set in PlatformInfo->Generic with Automatic enabled. Reminder of supported SMBIOS: iMac13,x+ iMacPro1,1 MacPro6,1+ MacBook8,1+ MacBookAir5,x+ MacBookPro9,x+ Couldn't allocate runtime area errors? See Fixing KALSR slide values SSDTs not being added So with Opencore, there's some extra secuirty checks added around ACPI files, specifically that table length header must equal to the file size. This is actually the fault of iASL when you compiled the file. Example of how to find it: * Original Table Header: * Signature \"SSDT\" * Length 0x0000015D (349) * Revision 0x02 * Checksum 0xCF * OEM ID \"ACDT\" * OEM Table ID \"SsdtEC\" * OEM Revision 0x00001000 (4096) * Compiler ID \"INTL\" * Compiler Version 0x20190509 (538510601) The Length and checksum value is what we care about, so if our SSDT is actually 347 bytes then we want to change Length to 0x0000015B (347)(the 015B is in HEX) Best way to actually fix this is to grab a newer copy of iASL or Acidanthera's copy of maciASL and remaking the SSDT Booting OpenCore reboots to BIOS Incorrect EFI folder structure, make sure all of your OC files are within an EFI folder located on your ESP(EFI system partition) macOS booting Stuck on RTC..., PCI ConfigurationBegins, Previous Shutdown..., HPET, HID: Legacy... \"Waiting for Root Device\" or Prohibited Sign error macOS installer in Russian Stuck on or near IOConsoleUsers: gIOScreenLock... Black screen after IOConsoleUsers: gIOScreenLock... on Navi 300 series Intel stalling on apfs_module_start... Stalling on apfs_module_start..., Waiting for Root device, Waiting on...IOResources..., previous shutdown cause... in Catalina Kernel Panic Cannot perform kext summary Kernel Panic AppleIntelMCEReporter Kernel Panic AppleIntelCPUPowerManagement Stop Sign with corrupted text(Still waiting for Root Device) Frozen in the macOS installer after 30 seconds 15h/16h CPU reboot after Data & Privacy screen Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy... Well this general area is where a lot of PCI devices are configured, and is where most boot ing issues with AMD hacks happen. The main places to check: Missing EC patch: Make sure you have your EC SSDT both in EFI/OC/ACPI and ACPI -> Add, double check it's enabled. If you don't have one, grab it here: SSDT-EC-USBX-AMD.aml IRQ conflict: Make sure either Above4GDecoding is enabled in the BIOS, if no option availible then add npci=0x2000 to boot args. Do not have both the Above4G setting enabled and npci in boot args, they will conflict Other BIOS settings that are important: CSM disabled, Windows 8.1/10 UEFI Mode enabled \"Waiting for Root Device\" or Prohibited Sign error Generally seen as a USB error, couple ways to fix: if you're hitting the 15 port limit, you can temporarily get around this with XhciPortLimit but for long term use, we recommend making a USBmap. CorpNewt also has a guide for this: USBmap Guide Another issue can be that certain firmware won't pass USB ownership to macOS, to fix this we can enable ReleaseUsbOwnership. Clover equivalent is FixOwnership macOS installer in Russian Default sample config is in russian, check your prev-lang:kbd value under NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82. Set to 656e2d55533a30 for American: en-US:0 and a full list can be found in AppleKeyboardLayouts.txt You may also need to reset NVRAM in the boot picker as well Stuck on or near IOConsoleUsers: gIOScreenLock... This is right before the GPU is properly initialized, verify the following: GPU is UEFI capable(GTX 7XX/2013+) CSM is off in the BIOS Forcing PCIe 3.0 link speed Black screen after IOConsoleUsers: gIOScreenLock... on Navi Add agdpmod=pikera to boot args switch between different display outputs 300 series Intel stalling on apfs_module_start... Commonly due to systems running AWAC clocks, pleas see the Getting started with ACPI section Stalling on apfs_module_start..., Waiting for Root device, Waiting on...IOResources..., previous shutdown cause... in Catalina Verify your EC SSDT is enabled and correct for your system. See the What's new in macOS Catalina post for more info Kernel Panic Cannot perform kext summary Generally seen as an issue surrounding the prelinked kernel, specifically that macOS is having a hard time interpreting the ones we injected. Verify that your kexts are in the correct order(master then plugins, Lilu always being first) and that kexts with executables have them and plist only kexts don't. Kernel Panic AppleIntelMCEReporter With macOS catalina, dual socket support is broken, and a fun fact about AMD firmware is that some boards will actually report multiple socketed CPUs. To fix this, add AppleMCEReporterDisabler to both Kernel Panic AppleIntelCPUPowerManagement This is likely due to faultly or outright missing NullCPUPowerManagement, the one hosted on AMD OSX's Vanilla Guide is corrupted. Go yell at Shannee to fix it. To fix the issue, either download a good copy from the Kext Repo or here: NullCPUPowerManagment.kext.zip Stop Sign with corrupted text(Still waiting for Root Device) With OS X 10.11 El Capitan, Apple imposed a 15 USB port limit. To get around this we actually create a USB map to include ports we want and kick out extras we don't care about. For install, set Kernel -> Quirks -> XhciPortLimit -> Enabled but for post install we recommend making a map as the port limit patch isn't guaranteed to work with future versions of macOS. For 15h and 16h AMD CPUs, you may need to add the following: XLNCUSBFix.kext If XLNCUSBFix still doesn't work, then try the following: AMD StopSign-fixv5 Frozen in the macOS installer after 30 seconds This is likely due to faultly or outright missing NullCPUPowerManagement, the one hosted on AMD OSX's Vanilla Guide is corrupted. Go yell at Shannee to fix it. To fix the issue, either download a good copy from the Kext Repo or here: NullCPUPowerManagment.kext.zip 15h/16h CPU reboot after Data & Privacy screen Follow directions here after UPDATE 2: Fix Data and Privacy reboot macOS frozen right before login This is a common example of screwed up TSC, for most system add VoodooTSCSync For Skylake-X, many firmwares including Asus and EVGA won't write to all cores. So we'll need to reset the TSC on cold boot and wake with TSCAdjustReset. Compiled version can be found here: TSCAdjustReset.kext. Note that you must open up the kext(ShowPackageContents in finder, Contents -> Info.plist) and change the Info.plist -> IOKitPersonalities -> IOPropertyMatch -> IOCPUNumber to the number of CPU threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total) macOS post-install Broken iMessage and Siri No on-board audio BIOS reset or sent into Safemode after reboot/shutdown? macOS GPU acceleration missing on AMD X570 DRM Broken \"Memory Modules Misconfigured\" on MacPro7,1 Apps crashing on AMD Broken iMessage and Siri En0 device not setup as Built-in, couple ways to fix: Find PCI path for your NIC with gfxutil(ie: ethernet, GBE1, ). Then via DeviceProperties in your config.plist, apply the property of built-in with the value of 01 and type Data. Hackintool can also grab the PCIRooth path if you're having issues with gfxutil. Recommended method NullEthernet.kext + SSDT-RMNE. Only recommended when first solution doesn't work If these fixes do not work, see the Fixing iServices page for more in-depth guide. No on-board audio Verify that your PCIRoot is correct for your audio controller, this can be verified with gfxutil though keep in mind that not all audio controllers are named HDEF. Verfy what yours is via IORegistryExplorer(Common 2 are HDEF and HDAS) path/to/gfxutil -f HDEF Then add this PCIRoot with the child layout-id to your config.plist under DeviceProperties -> Add: Then find out your layout-id for your specific codec: AppleALC's supported codec For this example, we'll find the layout-id for ALC1150. Looking at the supported list we're given the following: 0x100001, layout 1, 2, 3, 5, 7, 11 0x100001 refers to the codc revision, you can ignore this. For us what we care about is layout 1, 2, 3, 5, 7, 11, we want to test each one individually until you find a layout that works best for you. Remember that the DeviceProperty is in HEX, converting 5 to HEX becomes 05000000 and converting 11 to HEX becomes 0B000000 . Alternative is using alcid=xxx in your boot-args and replace xxx with your layout-id BIOS reset or sent into Safemode after reboot/shutdown? Issue with AppleRTC, quite a simple fix: Under Kernel -> patch: Enabled String YES Count Number 1 Identifier String com.apple.driver.AppleRTC Limit Nuber 0 Find Data 75330fb7 Replace Data eb330fb7 macOS GPU acceleration missing on AMD X570 Verify the following: GPU is UEFI capable(GTX 7XX/2013+) CSM is off in the BIOS Forcing PCIe 3.0 link speed DRM Broken With Haswell and newer iGPUs, DRM is outright broken on them with macOS Catalina. This includes iTunes Movies, Apple TV+, Amazon Prime and Netflix, the only fix is getting a supported dGPU preferably Polaris or newer that supports HEVC. More other GPUs, try different shiki boot args: WhateverGreen's DRM Chart \"Memory Modules Misconfigured\" on MacPro7,1 Add MacProMemoryNotificationDisabler kext to EFI/OC/Kexts and Kernel -> Add Apps crashing on AMD Easy fix, buy Intel So with AMD, whenever Apple calls CPU specific functions the app witll either not work or outright crash. Here are some apps and their \"fixes\": Adobe Products don't always work and there is no fix for lightroom at the moment Some fixes can be found here: Adobe Fixes Do note these fixes just disable functionality, they're not real fixes Virtual Machine running off of AppleHV's framework will not work(ie: Parallels 15, Vmware) VirtualBox works fine as its Java based Docker broken Docker toolbox is the only solution as its Java based, many feautures are unavailble with this Xcode AppleWatch simulator is broken in Catalina Mojave works fine Blender 2.8.0+ won't work 2.7.9 is last good version 15/16h CPU webpages crashing Follow directions here after UPDATE 5: Fix webpages Other issues Can't run acpidump.efi Fixing SSDTTime: Could not locate or download iasl! Fix Python: Python is not installed or not found on PATH Windows Startup Disk can't see APFS drives Incorrect resolution with OpenCore Can't run acpidump.efi Call upon OpenCore shell: shell> fs0: //replace with proper drive fs0:\\> dir //to verify this is the right directory Directory of fs0:\\ 01/01/01 3:30p EFI fs0:\\> cd EFI\\OC\\Tools //note that its with forward slashes fs0:\\EFI\\OC\\Tools> acpidump.efi -b -n DSDT -z Fixing SSDTTime: Could not locate or download iasl! This is usually due to an outdated version of Python, try either updating Python or add iasl to the scripts folder for SSDTTime: iasl macOS version iasl Windows version iasl Linux version Fix Python: Python is not installed or not found on PATH Easy fix, download and install the latest python: macOS link Windows link Linux link Make sure Add Python to PATH Windows Startup Disk can't see APFS drives Outdated Bootcamp drivers(generally ver 6.0 will come with brigadier, BootCamp Utility in macOS provides newer version like ver 6.1). CorpNewt has also forked brigadier fixing these issues as well: CorpNewt's brigadier Incorrect resolution with OpenCore Follow Hiding Verbose for correct setup, set UIScale to 02 for HiDPI Users also have noticed that setting ConsoleMode to Max will sometimes fail, leaving it empty can help "},"troubleshooting/debug.html":{"url":"troubleshooting/debug.html","title":"OpenCore Debugging","keywords":"","body":"OpenCore Debugging Last edited: January 13, 2020 Needing to figure out why you're getting issues or stalling? Well, you've come to the right place. To start, make sure you're using either the DEBUG or NOOPT versions of OpenCore. This will provide much more info than the RELEASE version. Target Used for enabling different levels of debugging 0x01 — Enable Logging 0x02 — Enable Onscreen debug 0x04 — Enable logging to Data Hub. 0x08 — Enable serial port logging. 0x10 — Enable UEFI variable logging. 0x20 — Enable non-volatile UEFI variable logging. 0x40 — Enable logging to file. To calculate the target, we can use a HEX calculator and then convert it to decimal. For us we want to have our values on stored onto a .txt file for later viewing: 0x01 — Enable Logging 0x02 — Enable Onscreen debug 0x10 — Enable UEFI variable logging. 0x40 — Enable logging to file. 0x01 + 0x02 + 0x10 + 0x40 = 0x53 0x53 converted to decimal becomes 83 So we can set Misc -> Debug -> Target -> 83 DisplayLevel Used for setting what is logged 0x00000002 — DEBUG_WARN in DEBUG, NOOPT, RELEASE. 0x00000040 — DEBUG_INFO in DEBUG, NOOPT. 0x00400000 — DEBUG_VERBOSE in custom builds. 0x80000000 — DEBUG_ERROR in DEBUG, NOOPT, RELEASE. A full list can be found in DebugLib.h. For us we just want the following: 0x00000002 — DEBUG_WARN in DEBUG, NOOPT, RELEASE. 0x00000040 — DEBUG_INFO in DEBUG, NOOPT. 0x80000000 — DEBUG_ERROR in DEBUG, NOOPT, RELEASE. Just like with Target, we use a HEX calculator then convert to decimal: 0x80000042 Converted to decimal Misc -> Debug -> DisplayLevel -> 2147483714 DisableWatchdog: YES Disables the UEFI watchdog, used for when OpenCore is stalling on something non-critical. "},"extras/legacy.html":{"url":"extras/legacy.html","title":"Legacy Install","keywords":"","body":"Legacy Install Last editied: January 27, 2020 Wanna try OpenCore but can't boot UEFI based sources? Well don't fret, there's hope for you! OpenCore supports DuetPkg which emulates a UEFI environment for legacy systems. To start, you need the following: BootInstall.command Install source(MacOS Journaled + GUID, size of USb depends on the version of macOS. 16GB recommended for catalina) Within your OpenCore build folder, navigate to Utilities/BootInstall. Here you'll find a file called BootInstall.command. What this does is install DuetPkg to your desired drive. Now you'll want to run BootInstall.command, do note that you may need sudo for this to work correctly on newer versions of macOS sudo Utilities/BootInstall/BootInstall.command This will give you a list of available disks, choose yours and you will be prompted to write a new MBR. Choose yes[y] and you'll be finished. This will provide you with an EFI partition with a boot file, this is where we'll add our OpenCore EFI. Note: You will need AppleUsbKbDxe.efi for picker support "},"extras/gpu-patches.html":{"url":"extras/gpu-patches.html","title":"GPU Patching","keywords":"","body":"GPU Patching Last edited: January 13, 2020 This little section is for those who need more than what is provided by simple framebuffer patching and WhateverGreen's autopatches: Applying a fakeID for unsupported GPUs iGPU BusID patching for 300 series motherboards Converting a clover fakeID to OpenCore With OpenCore, GPU FakeIDs are handled a bit differently. Specifcally that you need to have the PCIRoot path to apply the properties. Luckily FakeIDs are not required to boot, instead only needed for proper GPU acceleration so this can be done in post-install. Finding the PCIRoot of your GPU To find the PCIRoot, you'll want to grab gfxutil and run the following in terminal: path/to/gfxutil -f GFX0 This should give you something like this: PciRoot(0x20)/Pci(0x0,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0) Note: GFX0 can be replaced with GFX1, etc if the GPU you're fakeIDing isn't the first/main GPU. And machine running with CSM enabled and Windows8.1/10 mode(UEFI) disabled may find that the GPU is named display so adjust the above command accodingly. Apply the fakeID So lets grab a clover fakeID and go through how we'd convert it, for use we'll choose 0x67981002 which is the ID associated with the R9 280x and is commonly used by R9 280/380 users. Looking through clover's source code we find that fakeIDs are converted into the following properties: AMD GPUs: device-id ATY,DeviceID @0,compatible vendor-id ATY,VendorID To convert them, we'll need to do byte swap. This is due to Endianness: DeviceID: 67 98 -> 98 67 VendorID: 1002 -> 02 10 Now we can apply the properties: Key Type Value device-id Data 98670000 ATY,DeviceID Data 9867 vendor-id Data 02100000 ATY,VendorID Data 0210 You may notice we excluded @0,compatible, the reasoning for this is thatit actually interferes with WhateverGreen and macOS's ability to properly setup the GPU. See here for more info. Now navigate into your config.plist under DeviceProperties -> Add where you can apply these properties: iGPU BusID Patching This section is for users running \"true\" 300 series motherboards( B360, B365, H310, H370, Z390) who are having issues setting up their iGPU as a display out. So to get started I'll assume you've already done basic framebuffer patches in your config from the Coffeelake portion of the guide, it should look something like this: Now that we're prepped, we can start looking into busID patching. Checking the dumps on Insanelymac shows us this for the 3E9B0007 ID(Desktop UHD 630): ID: 3E9B0007, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00801302 TOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes) GPU Name: Intel UHD Graphics 630 Model Name(s): Camelia: Disabled Mobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3 [1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP [2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP [3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP 01050900 00040000 C7030000 02040A00 00040000 C7030000 03060800 00040000 C7030000 Looking at all this can be quite overwheling, but we'll break it down to be a bit simpler. For use we care about this: [1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP [2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP [3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP 01050900 00040000 C7030000 02040A00 00040000 C7030000 03060800 00040000 C7030000 These are your iGPUs ports by default, lets go through port 1 and see what each section is used for: The first port: 01050900 00040000 C7030000 Port: 01 01050900 00040000 C7030000 busId: 0x05 01050900 00040000 C7030000 Pipe Number 9 (little endian): 01050900 00040000 C7030000 Connector type: DisplayPort 01050900 00040000 C7030000 Flags - We leave it as default: 01050900 00040000 C7030000 Things to note: You cannot use the same busId twice, having 2 in use will create conflicts Pipe number and flags don't need to changed List of connector types: 00 04 00 00 - DisplayPort 00 08 00 00 - HDMI 04 00 00 00 - Digital DVI 02 00 00 00 - LVDS (for laptops) 01 00 00 00 - Dummy port Mapping video ports Plug display into HDMI port Set Port 1 to the HDMI connector type: 01xx0900 00080000 C7030000 Disable ports 2 and 3 with busid=00: 02000A00 00040000 C7030000 03000800 00040000 C7030000 Walk through busids for Port 1 if the previous didn't work(yup you gotta do a shit ton of reboots). The maximum busid on most platforms is 0x06 01010900 00080000 C7030000 01020900 00080000 C7030000 01030900 00080000 C7030000 etc If you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on 01000900 00040000 C7030000 02xx0A00 00080000 C7030000 03000800 00040000 C7030000 Adding to your config.plist So adding these patches are simple though a bunch of entires are required: framebuffer-con0-enable = 01000000 framebuffer-con1-enable = 01000000 framebuffer-con2-enable = 01000000 framebuffer-con0-alldata = port 1 framebuffer-con1-alldata = port 2 framebuffer-con2-alldata = port 3 So when adding the patches, port 1 will actually become con0 as the ports start at 0. These are also all data types when entering your values. A finished config should look something like this: Source for iGPU BusID patching: CorpNewt's Brain "},"extras/acpi.html":{"url":"extras/acpi.html","title":"Getting started with ACPI","keywords":"","body":"Getting started with ACPI Last edited: January 30, 2020 A quick explainer on ACPI and how to make SSDTs So what are DSDTs and SSDTs? Well, these are tables present in your firmware that outline hardware devices like USB controllers, CPU threads, embedded controllers, system clocks and such. A DSDT(Differentiated System Description Table) can be seen as the body holding most of the info with smaller bits of info being passed by the SSDT(Secondary System Description Table) So why do we care about these tables? macOS can be very picky about the devices present in the DSDT and so our job is to correct it. The main devices that need to be corrected for macOS to work properly: Embedded controllers(EC) All semi-modern intel machines have an EC exposed in their DSDT, with many AMD systems also having it exposed. These controllers are not compatible with macOS so then need to be hidden from macOS and replaced with a dummy EC when running macOS Catalina Plugin type This is used to enable native CPU power management on Intel Haswell and newer CPUs, the SSDT will connect to the first thread of the CPU. Not meant for AMD AWAC system clock. This applies to all 300 series motherboards including Z370 boards, the specific issue is that newer boards ship with AWAC clock enabled. This is a problem because macOS cannot communicate with AWAC clocks, so this requires us to either force on the Legacy RTC clock or if unavailable create a fake one for macOS to play with NVRAM SSDT True 300 series motherboards(non-Z370) don't declare the FW chip as MMIO in ACPI and so XNU ignores the MMIO region declared by the UEFI memory map. This SSDT brings back NVRAM support and uses the scope PCI0.LPCB, this is the most common scope so a pre-made can be found here: SSDT-PMC.aml or continue reading and make your own. What SSDTs do each platform need Please see the specific ACPI section of your config.plist, all SSDTs needed are covered there with a breif explainer. SSDTs: The easy way So here we'll be using a super simple tool made by CorpNewt: SSDTTime What this tool does is dumps your DSDT from your firmware, and then creates SSDTs based off your DSDT. This must be done on the target machine running either Windows or Linux So what can't SSDTTime do?: Skylake-X/SP/W(X299, C621, C422) SSDTs: The ACPI is odd on these platforms so manual work is required AWAC and RTC0 SSDTs: 300 series intel boards will also need to figure his out(Z390 systems are most common for requiring this but some gigabyte Z370 do as well) PMC SSDT: For fixing 300 series intel NVRAM, a prebuilt for PCI0.LPCB can be found here: SSDT-PMC.aml USBX SSDT: This is included on sample SSDTs but SSDTTime only makes the SSDT-EC part, Skylake and newer users can grab a prebuilt here: SSDT-USBX.aml For users who don't have all the options avaible to them in SSDTTime, you can follow the \"SSDTs: The long way\" section. You can still use SSDTTime for SSDTs it support for you. Running SSDTTime Run the SSDTTime.bat file as Admin on the target machine and you should see something like this: What are all these options?: 1. FixHPET - Patch out IRQ Conflicts IRQ patching, mainly needed for X79, X99 and laptop users 2. FakeEC - OS-aware Fake EC This is the SSDT-EC, required for Catalina users 3. PluginType - Sets plugin-type = 1 on CPU0/PR00 This is the SSDT-PLUG, for Intel only 4. Dump DSDT - Automatically dump the system DSDT Dumps your DSDT from your firmware What we want to do is select option 4. Dump DSDT first, then select the appropriate option(s) for your system. What about USBX? For Skylake+ and AMD, you can grab a prebuilt file here: SSDT-USBX.aml. This file is plug and play and requires no device configuration, do not use on Haswell and older. Troubleshooting note: See General Troubleshooting.md if you're having issues running SSDTTime Adding to OpenCore Don't forget that SSDTs need to be added to Opencore, eminder that .aml is complied, .dsl is code. Add only the .aml file: EFI/OC/ACPI config.plist -> ACPI -> Add Reminder that Cmd/Crtl+R with ProperTree pointed at your OC folder will add all your SSDTs, kexts and .efi drivers to the config for you. Do not add your DSDT to OpenCore, its already in your firmware SSDTs: The long way SSDTTime doesn't support your platform or wanting to really learn the process of making SSDTs? Well you've come to the right place! Getting a copy of our DSDT So to start, we'll need to get a copy of your DSDT from your firmware. There's a couple of options: MaciASL Open the app on the target machine(must already be running macOS) and the system's DSDT will show, then File -> SaveAs System DSDT. Make sure the file format is ACPI Machine Language Binary(.AML), this will require the machine to be running macOS Do note that all ACPI patches from clover/OpenCore will be applied to the DSDT SSDTTime Supports both Windows and Linux for DSDT dumping Option 4 to dump acpidump.exe In command prompt run path/to/acpidump.exe -b -n DSDT -z, this will dump your DSDT as a .dat file. Rename this to DSDT.aml F4 in Clover Boot menu DSDT can be found in EFI/CLOVER/ACPI/origin, the folder must exist before dumping acpidump.efi Add this to EFI/OC/Tools and in your config under Misc -> Tools with the argument: -b -n DSDT -z and select this option in OpenCore's picker. Rename the DSDT.dat to DSDT.aml. Tool is provided by acpica If OpenCore is having issues running acpidump, you can call it from the shell with OpenCoreShell(reminder to add to both EFI/OC/Tools and in your config under Misc -> Tools ): shell> fs0: // replace with proper drive fs0:\\> dir // to verify this is the right directory Directory of fs0:\\ 01/01/01 3:30p EFI fs0:\\> cd EFI\\OC\\Tools // note that it's with forward slashes fs0:\\EFI\\OC\\Tools> acpidump.efi -b -n DSDT -z Compiling and decompiling DSDTs and SSDTs macOS So compiling DSDTs and SSDTs are quite easy with macOS, all you need is MaciASL. To compile, just File -> SaveAs -> ACPI Machine Language Binary(.AML), decompiling is just opening the file in MaciASL. Windows Compiling and decompiling on windows is fairly simple though, you will need iasl.exe and Command Prompt: path/to/iasl.exe path/to/DSDT.aml If compiled .aml file is provided, a decompiled .dsl file will be given and vice versa. Linux Compiling and decompiling with Linux is just as simple, you will need a special copy of iasl and terminal: path/to/iasl path/to/DSDT.aml If compiled .aml file is provided, a decompiled .dsl file will be given and vice versa. Creating SSDTs EC SSDT This one's fairly easy to figure out, open your decompiled DSDT and search for PNP0C09. This should give you a result like this: As you can see our PNP0C09 is found within the Device (EC0) meaning this is the device we want to hide from macOS(others may find ). Now grab our SSDT-EC and uncomment the EC0 function(remove the /* and */ around it): SSDT-EC-USBX For Skylake+ and all AMD systems SSDT-EC For Haswell and older /* But looking back at the screenshot above we notice something, our ACPI path is different: PC00.LPC0 vs PCI0.LPCB. This is very important especially when you're dealing with Intel consumer vs Intel HEDT and AMD, PC00.LPC0 is common on Intel HEDT while PCI0.SBRG is common on AMD. And they even come with name variation such as EC0, H_EC, PGEC and ECDV, so there can't be a one size fits all SSDT, always verify your path and device. And make sure to scroll to the bottom as the new Fake EC function also need the correct path to replace the old EC. Do not rename the EC device itself, this is our fake EC we're using for macOS to play with. Just change the path! What happens if multiple PNP0C09 show up When this happens you need to figure out which is the main and which is not, it's fairly easy to figure out. Check each controller for the following properties: _HID _CRS _GPE What happens if no PNP0C09 show up? This means your SSDT can be almost complied, the main thing to watch for is whether your DSDT uses PCI0.LPCB or not. The reason being is that we have a FakeEC at the bottom of our SSDT that needs to connect properly into our DSDT. Gernally AMD uses SBRG while Intel HEDT use LPC0, verify which show up in your DSDT. Once you find out, change PCI0.LPCB to your correct path: Scope (\\_SB.PCI0.LPCB) { Device (EC) { Name (_HID, \"ACID0001\") // _HID: Hardware ID Method (_STA, 0, NotSerialized) // _STA: Status { If (_OSI (\"Darwin\")) { Return (0x0F) } Else { Return (Zero) } } } } Hey what about USBX? Do I need to do anything? USBX is universal across all systems, it just creates a USBX device that forces USB power properties. This is crucial for fixing Mics, DACs, Webcams, Bluetooth Dongles and other high power draw devices. This is not mandatory to boot but should be added in post-install if not before. Note that USBX is only used on skylake+ systems, Broadwell and older can ignore and that USBX requires a patched EC to function correctly For those who want a deeper dive into the EC issue: What's new in macOS Catalina PLUG SSDT Intel CPUs only CPU naming is fairly easy to figure out as well, open your decompiled DSDT and search for Processor. This should give you a result like this: As we can see, the first processor in our list is PR00. This is what we'll be applying the plugin-type=1 property too. Now grab SSDT-PLUG and replace the default CPU0 with our PR00. Note that there are 2 mentions of CPU0 in the SSDT. There are also some edge cases with Processor, specifically on HEDT series like X79, X99 and X299. This edge case is that the ACPI path is much longer and not so obvious: If we then search for instances of CP00 we find that it's ACPI path is SB.SCK0.CP00: So for this X299 board, we'd change \\_PR.CPU0 with \\_SB.SCK0.CP00 and External (_PR_.CPU0, ProcessorObj) with External (_SB_.SCK0.CP00, ProcessorObj) AWAC SSDT This is required for most B360, B365, H310, H370, Z390 and even some newer BIOS revisions on Z370 like the Gigabyte Z370 Aurus Ultra firmware version 13+ What the SSDT-AWAC will do is force enable the Legacy RTC device in macOS, the reason we want to do this is that macOS currently does not support AWAC as a system clock. In some rare cases, there is no Legacy RTC device to force enable so we'll need to create a fake RTC device for macOS to play with using SSDT-RTC0 To determine whether you need SSDT-AWAC or SSDT-RTC0, open your decompiled DSDT and search for Device (AWAC). If you get a result then you have an AWAC system clock present, if nothing shows then no need to continue and no need for this SSDT. Otherwise, continue with the next search for STAS ==: As you can see we found the STAS == in our DSDT, this means we're able to force enable our Legacy RTC. In this case, SSDT-AWAC will be used As-Is with no modifications required. Just need to compile. For systems where no STAS shows up but you do have AWAC, you can use SSDT-RTC0 though you will need to check whether your DSDT uses LPCB, LBC or LBC0. By default it uses LPCB, you can check by just searching for instances of LPCB, LBC and LBC0 in your DSDT PMC SSDT This is required for all B360, B365, H310, H370, Z390 motherboards This SSDT brings back NVRAM support and uses the scope PCI0.LPCB to check what scope your system has, search your DSDT for Name (_ADR, 0x001F0000). This address is used for Low Pin Count devices(LPC) but the device name can vary(quite rarely in reality, almost all consumer intel boards use LPCB) Cleaning up Now that we have all our SSDTs compiled, the last thing to do is add our SSDTs to both EFI/OC/ACPI and our config under ACPI -> Add. A reminder that ProperTree users can press the hotkey Cmd/Ctrl+R for automatically adding your SSDTs to the config. A reminder that there is no need to add your DSDT as its already inside your firmware. Now head back to your specific CPU section to setup your config.plist Intel Config.plist Ivy Bridge Haswell Skylake Kaby Lake Coffee Lake Intel HEDT Config.plist Skylake-X AMD Config.plist AMD "},"troubleshooting/verbose.html":{"url":"troubleshooting/verbose.html","title":"Fixing Resolution and Verbose","keywords":"","body":"Fixing Resolution and Verbose Last edited: January 13, 2020 Wanting a more clean booting experience with macOS without all that verbose text while booting? Well you need a couple things: Recommended Configuration: NVRAM -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> boot-args Remove -v from your config.plist UEFI -> Protocols: ConsoleControl set to True UEFI -> Quirks: ProvideConsoleGop set to True IgnoreTextInGraphics: set to True SanitiseClearScreen: set to True Misc -> Boot: Resolution: set to your monitor's resolution ConsoleBehaviourOs: set to Graphics ConsoleBehaviourUi: set to Text ConsoleMode set to Max Setting to Max can infact break the resolution, if having issues set this to blank Please refer below for other settings if these Misc/Boot values do not work for your firmware. For Broadwell and newer: Misc -> Boot: ConsoleBehaviourOs: set to ForceGraphics ConsoleBehaviourUi: set to ForceText For Haswell and older: Misc -> Boot: ConsoleBehaviourOs: set to Graphics ConsoleBehaviourUi: set to ForceText "},"extras/kalsr-fix.html":{"url":"extras/kalsr-fix.html","title":"Fixing KALSR slide values","keywords":"","body":"Fixing KALSR slide values Last editied: January 13, 2020 Fixing KALSR slide values This section is for users who wish to understand and fix \"Couldn't allocate runtime area\" errors. This is most common with either Z390, X99 and X299. This section will also support Clover as the info is also useful for them. So what is KASLR? Well KASLR stands for Kernel address space layout randomization, what it's used for is security purposes. Specifically, this makes it much harder for attackers to figure out where the important objects are in memory as it's always random both between machines and between boots. More in-depth explainer on KASLR Where this becomes an issue is when you introduce devices with either small memory maps or just way too many devices present. There likely is space for the kernel to operate but there's also free space where the kernel won't fit entirely. This is where slide=xxx fits in. Instead of letting macOS choose a random area to operate in each boot, we'll constrain it to somewhere that we know will work. And who is this info for? Well as I mentioned earlier, this is for users who don't have enough space for the kernel or moves to a place that is too small. You'll generally experience an error similar to this when booting: Error allocating 0x1197b pages at 0x0000000017a80000 alloc type 2 Couldn't allocate runtime area With some variation: Only 244/256 slide values are usable! Or even crashes while running macOS: panic(cpu 6 caller 0xffffff801fc057ba): a freed zone element has been modified in zone kalloc.4096: expected 0x3f00116dbe8a46f6 but found 0x3f00116d00000000 The best part about these errors is that they can be random, also the reason why power cycling your PC 20 times also can fix the issue but only temporarily. Fun Fact: It takes around 31 ms to find an area to operate in, manually setting a slide value can on average can reduce boot times by 0.207%!!! So how do I fix this? The real fix to this is quite simple actually, the process is both the same for Clover and OpenCore users. What you'll need: Clover users: AptioMemoryFix(Don't mix Aptio fixes together or use OsxAptioFixDrvX, only AptioMemoryFix is supported in this guide) Clover Shell(most users already have this included, usually called shell64.efi or some variation) OpenCore users: FwRuntimeServices OpenCoreShell(Don't forget to enable this under Root->Misc->Tools) Config.plist settings: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, etc DevirtualiseMmio: YES Reduces stolen memory footprint so we're given more options for slide values, do not use on AMD CPU based systems DisableVariableWrite: YES Reroutes NVRAM to nvram.plist, needed for systems without supported NVRAM(B360, B365, H310, H370, Q370, Z390). Some C612, X79, X99, X299 systems will also need this. EnableSafeModeSlide: YES Allows us to use slide in safe mode, just so if you have other issues troubleshooting won't mess it up. EnableWriteUnprotector: YES Allows us to write to certain areas that the firmware locks, specifically the CR0 register. ProvideCustomSlide: YES Kinda need that slide to do any real work. SetupVirtualMap: YES Creates a layer between macOS and your memory map for greater support and fewer chances of insecure write access. ShrinkMemoryMap: YES Fixes issues with very large memory maps that don't fit, very useful for X99 and X299 platforms and sometimes for Z390. Prepping the BIOS The reason we need to reset the memory map is we want it to be more deterministic, what I mean by this is that there will be less variation on each boot so we have fewer edge cases(Memory Maps are not always consistent on boots). To prep: Update BIOS(extremely important as early BIOS's shipped are known to have memory map issues, especially with Z390) Clear CMOS Enable much needed BIOS settings: Above4GDecoding: This allows devices to use memory regions above 4GB meaning macOS will have more room to fit, can be problematic on some X99, X299 so recommended to test with and without. Boot Options -> Windows8.1/10 mode: This will make sure no old legacy garbage is loaded. Fun fact, other OS is only designed for booting older versions of Windows and not for other OS. Disable as many unneeded devices in the BIOS(this means there is less variation in the map on each boot, so fewer chances of boot failure). Common settings: CSM: For legacy support, adds a bunch of garbage we don't want. This also can break the shell so you can't boot into it. Intel SGX: Software Guard Extensions, takes up a lot of space and does nothing in macOS. Parallel Port: macOS can't even see parallel. Serial Port: I'd like to know how many of you are debugging the kernel... iGPU: Not ideal but some systems have such bloated maps that the iGPU just can't fit. Thunderbolt: Many hacks don't have thunderbolt working, boards that don't have thunderbolt but have this option just waste more space. LED lighting: Sorry mate, time to go. Legacy USB: More Legacy Crap. Finding the Slide value Now what you'll want to do is open the EFI shell in your boot manager of choice and run memmap. This will give you a list of all pages and their sizes. This is where the fun begins. Example of what you'll see: Type Start End # Pages Attributes RT_Data 0000000000000000 0000000000000FFF 0000000000000001 800000000000000F Available 0000000000001000 0000000000057FFF 0000000000000057 000000000000000F Reserved 0000000000058000 0000000000058FFF 0000000000000001 000000000000000F Available 0000000000059000 000000000008FFFF 0000000000000037 000000000000000F RT_Code 0000000000090000 0000000000090FFF 0000000000000001 800000000000000F Available 0000000000091000 000000000009DFFF 000000000000000D 000000000000000F Reserved 000000000009E000 000000000009FFFF 0000000000000002 000000000000000F Available 0000000000100000 000000005B635FFF 000000000005B536 000000000000000F BS_Data 000000005B636000 000000005B675FFF 0000000000000040 000000000000000F Available 000000005B676000 000000006AF77FFF 000000000000F902 000000000000000F LoaderCode 000000006AF78000 000000006B155FFF 00000000000001DE 000000000000000F BS_Data 000000006B156000 000000006B523FFF 00000000000003CE 000000000000000F ACPI_NVS 000000006B524000 000000006B524FFF 0000000000000001 000000000000000F BS_Data 000000006B526000 000000006B625FFF 0000000000000100 000000000000000F Available 000000006B626000 000000006B634FFF 000000000000000F 000000000000000F Now you may be wondering how the hell we convert this to a slide value, well it's quite simple. What we're interested in is the largest available value within the Start column. In this example we see that 000000006B626000 is our largest, do note that these are in HEX so if there are multiple values close to each other you may need to convert them to decimal. To the calculate slide value(macOS's built-in calculator has a programming function by pressing ⌘+3): 000000006B626000 = 0x6B626000 (0x6B626000 - 0x100000)/0x200000 = 0x35A And to verify that this is correct: 0x100000 + (0x35A * 0x200000) = 0x6B500000 Whenever the returned value is not the original(0x6B500000 vs 0x6B626000), just add +1 to your final slide value. This is due to rounding. So for example 0x35A converted to decimal becomes 858 and then +1 will give you slide=858. But wait for just a second, this is higher than 256! That is correct, this is caused by memory maps that include Above4GDecoding sectors which cannot be used. So you will need to keep going down the list until you find a small enough value(for us that would be 0000000000100000) And just to make it a bit clearer on the formula: (HEX - 0x100000)/0x200000 = Slide Value in HEX 0x100000 + (Slide Value in HEX * 0x200000) = Your original HEX value(if not then add +1 to your slide value) Now navigate into your config.plist and add your slide value with the rest of your boot arguments(for us it would be slide=0 when using 0x100000). If this value still gives you errors then you may proceed to the second-largest Start value and so on. Sometimes you may find that when you calculate slide that you receive super small vales like slide=-0.379150390625, when this happens round this to slide=0. And for users who are having issues finding their slide value can also type $slide [insert largest #Pages value] in the #Sandbox channel on the r/Hackintosh Discord But this is soooooo hard Well fret not, for there is a simple solution. After running memmap in the shell, run: shell> fs0: //replace with your USB fs0:\\> dir //to verify this is the right directory, if not try fs1 and so on Directory of fs0:\\ 01/01/01 3:30p EFI fs0:\\> memmap > memmap.txt This will add a memmap.txt file to the root of your EFI, you can then proceed to drop it into the r/Hackintosh discord and type $slide [insert a link to memmap.txt]. Do note that this doesn't always work so so may still need to do this manually. "},"extras/msr-lock.html":{"url":"extras/msr-lock.html","title":"Fixing CFG Lock","keywords":"","body":"Fixing CFG Lock Last editied: January 13, 2020 Disabling CFG Lock So you've installed macOS but you're using those pesky CFG-Lock patches that we want to get rid of, well to do this is fairly simple. You'll need the following: Inside your EFI/OC/Tools folder and config.plist: VerifyMsrE2 Modifed GRUB Shell And some apps to help us out: UEFITool (Make sure it's UEFITool and not UEFIExtrac) Universal-IFR-Extractor And don't forget to disable the following from your config.plist: AppleCpuPmCfgLock AppleXcpmCfgLock And the final part, grabbing your BIOS from the vendors' website. Now the fun part! Checking if CFG-Lock can be turned off Boot OpenCore and select the VerifyMsrE2 option in the picker. This tool will tell you whether your BIOS supports CFG-Lock and if it can be unlocked. Turning off CFG-Lock manually Open your firmware with UEFITool and then find CFG Lock as a Unicode string. If nothing pops up then your firmware doesn't support CFG Lock, otherwise continue on. You'll find that this string is found within a Setup folder, right-click and export as Setup.bin Open your setup file with ifrextract and export as a .txt file with terminal: path/to/ifrextract path/to/Setup.bin path/to/Setup.txt Open the text file and search for CFG Lock, VarStoreInfo (VarOffset/VarName): and note the offset right after it(ie: 0x5A4) Run the Modified GRUB Shell and paste the following where 0x5A4 is replaced with your value: setup_var 0x5A4 0x00 Do note that variable offsets are unique not just to each motherboard but even to its firmware version. Never try to use an offset without checking. And you're done! Now you'll have correct CPU power management Note: Every time you reset your BIOS you will need to flip this bit again, make sure to write it down with the BIOS version so you know which. "},"post-install/iservices.html":{"url":"post-install/iservices.html","title":"Fixing iServices","keywords":"","body":"Fixing iMessage and other services with OpenCore This page is for those having iMessage and other iServices issues, this is a very basic guide so will not go as in-depth into the issues as some other guides. This specific guide is a translation and reinterpretation of the AppleLife Guide on fixing iService: Как завести сервисы Apple - iMessage, FaceTime, iCloud Generate a new Serial Download GenSMBIOS and select option 1 to download MacSerial and next option 3 to generate some new serials. What we're looking for is a valid serial that currently has no registered purchase date. Tip: iMacPro1,1 10 will print 10 serials, this will save you some time on generating Now enter the serial into the Apple Check Coverage page, you will get 1 of 3 responses: \"We’re sorry, but this serial number isn’t valid. Please check your information and try again.\": Valid Purchase date: Purchase Date not Validated: This last one is what we're after, as we want something genuine but currently not in use by anyone. Now we can translate the rest of the values into our config.plist -> PlatformInfo -> Add: Type = SystemProductName Serial = SystemSerialNumber Board Serial = MLB SmUUID = SystemUUID Fixing En0 To start, grab Hackintool and head to Info -> Misc Here under Network Interfaces, look for En0 under BSD Names and check whether the device has a checkmark under Builtin. If there is a checkmark, skip to Fixing ROM section otherwise continue reading. What if I don't have En0 at all?!? Well, we'll want to reset macOS so it can build the interfaces fresh, open terminal and run the following: sudo rm /Library/Preferences/SystemConfiguration/NetworkInterfaces.plist sudo rm /Library/Preferences/SystemConfiguration/preferences.plist Once done reboot and check again. If this doesn't work, add NullEthernet.kext and ssdt-rmne.aml to your EFI and config.plist under Kernel -> Add and ACPI -> Add respectively. The SSDT is precompiled so no extra work needed, reminder compiled files have a .aml extension and .dsl can be seen as source code. Now head under the PCI tab of Hackintool and export your PCI DeviceProperties, this will create a pcidevices.plist on your desktop Now search through the pcidevices.plist and find the PCIRoot of your ethernet controller. For us, this would be PciRoot(0x0)/Pci(0x1f,0x6) Now with the PCIRoot, go into your config.plist -> DeviceProperties -> Add and apply the property of built-in with type Data and value 01 Fixing ROM This is a section many may have forgotten about but this is found in your config.plist under PlatformInfo -> generic -> ROM To find your actual MAC Address/ROM value, you can find in a couple places: BIOS macOS: System Preferences -> Network -> Ethernet -> Advanced -> MAC Address Windows: Settings -> Network & Internet -> Ethernet -> Ethernet -> Phyisical MAC Address Some users have even gone as far as using real Apple MAC Address dumps for their config, for this guide we'll be using our real MAC Address but note that this is another option When adding this to your config, c0:7e:bf:c3:af:ff should be converted to c07ebfc3afff as the Data type cannot accept colons(:). Verifying NVRAM Something that many forget about iServices is that NVRAM is curtial to getting it working correcttly, the reason being is that iMessage keys and such are stored in NVRAM. Without NVRAM, iMessage can neither see nor store keys. So we'll need to verify NVRAM works, regardless if \"it should work\" as some firmwares can be more of a pain than others. Please refer to the Emulated NVRAM section of the OpenCore Guide for both testing if you have working NVRAM and emulating it if you dont. Clean out old attempts This is important for those who've tried setting up iMessage but failed, to start make sure your NVRAM has been cleared. You can enable the option in the boot picker in your config under config.plist -> Misc -> Security -> AllowNvramReset. Next open terminal and run the following: sudo rm -rf ~/Library/Caches/com.apple.iCloudHelper* \\ ~/Library/Caches/com.apple.Messages* \\ ~/Library/Caches/com.apple.imfoundation.IMRemoteURLConnectionAgent* \\ ~/Library/Preferences/com.apple.iChat* \\ ~/Library/Preferences/com.apple.icloud* \\ ~/Library/Preferences/com.apple.imagent* \\ ~/Library/Preferences/com.apple.imessage* \\ ~/Library/Preferences/com.apple.imservice* \\ ~/Library/Preferences/com.apple.ids.service* \\ ~/Library/Preferences/com.apple.madrid.plist* \\ ~/Library/Preferences/com.apple.imessage.bag.plist* \\ ~/Library/Preferences/com.apple.identityserviced* \\ ~/Library/Preferences/com.apple.ids.service* \\ ~/Library/Preferences/com.apple.security* \\ ~/Library/Messages Verifying your work one last time Grab macserial and run the following: path/to/macserial -s This will provide us with a full rundown of our system, verify that what is presented matches up with your work. Cleaning up your AppleID Remove all devices from your AppleID: Manage your devices Enable 2 Factor-Auth Remove all iServices from Keychain, some examples:ids: identity-rsa-key-pair-signature-v1 ids: identity-rsa-private-key ids: identity-rsa-public-key ids: message-protection-key ids: message-protection-public-data-registered ids: personal-public-key-cache iMessage Encryption Key iMessage Signing Key com.apple.facetime: registrationV1 etc ... And a final layer of precaution is to make a new AppleID to play with, this makes sure that if you do end up blacklisting your account that it's not your main. An extra tip is adding a payment card to the account, some users found this also helped with iMessage activation. Customer Code error Welp mate, you've done it. You blackmailed your AppleID. The fix is simple but not pretty, you MUST call Apple. Otherwise, there is no proceeding besides using a new account. Adding a payment card before calling can help legitimise the account so it doesn't seem as much like a bot. "},"misc/credit.html":{"url":"misc/credit.html","title":"Credit","keywords":"","body":"Credit Last edited: January 13, 2020 No good guide is made by one man, here's credit to those who've helped out: vit9696 One of many developers of OpenCore Corrections to the original guide Corrections to this guide...(seriously this man deserves a medal) icedterminal Heavy grammar correction Clover removal S2F0amEgS2xvdmVy Link correction CorpNewt Heavily inspiring this guide(if not a rip off) and helping overal with questions and advice Spoof SSDT source Midi Corrections and recommendations for the guide Andrey1970 Corrections on EHCI Gengik84 -wegnoegpu suggestion Verbose correction Audio DevicePath location correction doesprintfwork Heavily inspiring the AMD section Additions to kernel.json AlGrey#9303 AMD Kernel patches NoOne/IOIIIO For the original AMD Vanilla Guide Corrections to AMD portion of the guide Thonkdifferent Additions to kernel.json jonpalmisc Much needed proof reading Developers of OpenCore: Download-Fritz Goldfish64 savvamitrofanov vit9696 Guides linked or those that inspired this guide: r/Hackintosh Vanilla Desktop Guide All-in-one Vanilla AMD Hackintosh Guide USB Map Guide Intel Framebuffer Patching AppleALC Supported Codecs gfxutil Gotta rep dat merch guides: Getting Started With OpenCore(The guide that started it all) GPU Buyers Guide Disable Unsupported GPUs Anti-Hackintosh Buyers Guide And for those who have either recommendations or issues with this guide can find the Github for this site here Sources: KALSR slide: Vit9696's Explainer Apianti's explainer KASLR Explainer More KASLR Explainer Cleaning RC scripts: Clover Emulated NVRAM Uninstaller ACPI Dumping: acpica iServices Guide: Как завести сервисы Apple - iMessage, FaceTime, iCloud "}}